// AUTOGENERATED FILE

//go:build !codeanalysis

package model

import (
	"github.com/apibrew/apibrew/pkg/abs"
	"github.com/apibrew/apibrew/pkg/model"
	"github.com/apibrew/apibrew/pkg/types"
	"google.golang.org/protobuf/types/known/structpb"
)

import "github.com/google/uuid"
import "time"

type FunctionTriggerMapper struct {
}

func NewFunctionTriggerMapper() *FunctionTriggerMapper {
	return &FunctionTriggerMapper{}
}

var FunctionTriggerMapperInstance = NewFunctionTriggerMapper()

func (m *FunctionTriggerMapper) New() *FunctionTrigger {
	return &FunctionTrigger{}
}

func (m *FunctionTriggerMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "logic",
		Name:      "FunctionTrigger",
	}
}

func (m *FunctionTriggerMapper) ToRecord(functionTrigger *FunctionTrigger) *model.Record {
	var rec = &model.Record{}
	rec.Properties = m.ToProperties(functionTrigger)

	if functionTrigger.Id != nil {
		rec.Id = functionTrigger.Id.String()
	}

	return rec
}

func (m *FunctionTriggerMapper) FromRecord(record *model.Record) *FunctionTrigger {
	return m.FromProperties(record.Properties)
}

func (m *FunctionTriggerMapper) ToProperties(functionTrigger *FunctionTrigger) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Id := functionTrigger.Id

	if var_Id != nil {
		var var_Id_mapped *structpb.Value

		var var_Id_err error
		var_Id_mapped, var_Id_err = types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(*var_Id)
		if var_Id_err != nil {
			panic(var_Id_err)
		}
		properties["id"] = var_Id_mapped
	}

	var_Name := functionTrigger.Name

	var var_Name_mapped *structpb.Value

	var var_Name_err error
	var_Name_mapped, var_Name_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Name)
	if var_Name_err != nil {
		panic(var_Name_err)
	}
	properties["name"] = var_Name_mapped

	var_Resource := functionTrigger.Resource

	var var_Resource_mapped *structpb.Value

	var var_Resource_err error
	var_Resource_mapped, var_Resource_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Resource)
	if var_Resource_err != nil {
		panic(var_Resource_err)
	}
	properties["resource"] = var_Resource_mapped

	var_Namespace := functionTrigger.Namespace

	var var_Namespace_mapped *structpb.Value

	var var_Namespace_err error
	var_Namespace_mapped, var_Namespace_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Namespace)
	if var_Namespace_err != nil {
		panic(var_Namespace_err)
	}
	properties["namespace"] = var_Namespace_mapped

	var_Action := functionTrigger.Action

	var var_Action_mapped *structpb.Value

	var var_Action_err error
	var_Action_mapped, var_Action_err = types.ByResourcePropertyType(model.ResourceProperty_ENUM).Pack(string(var_Action))
	if var_Action_err != nil {
		panic(var_Action_err)
	}
	properties["action"] = var_Action_mapped

	var_Order := functionTrigger.Order

	if var_Order != nil {
		var var_Order_mapped *structpb.Value

		var var_Order_err error
		var_Order_mapped, var_Order_err = types.ByResourcePropertyType(model.ResourceProperty_ENUM).Pack(string(*var_Order))
		if var_Order_err != nil {
			panic(var_Order_err)
		}
		properties["order"] = var_Order_mapped
	}

	var_Async := functionTrigger.Async

	var var_Async_mapped *structpb.Value

	var var_Async_err error
	var_Async_mapped, var_Async_err = types.ByResourcePropertyType(model.ResourceProperty_BOOL).Pack(var_Async)
	if var_Async_err != nil {
		panic(var_Async_err)
	}
	properties["async"] = var_Async_mapped

	var_Function := functionTrigger.Function

	if var_Function != nil {
		var var_Function_mapped *structpb.Value

		var_Function_mapped = structpb.NewStructValue(&structpb.Struct{Fields: FunctionMapperInstance.ToProperties(var_Function)})
		properties["function"] = var_Function_mapped
	}

	var_Annotations := functionTrigger.Annotations

	if var_Annotations != nil {
		var var_Annotations_mapped *structpb.Value

		var var_Annotations_st *structpb.Struct = new(structpb.Struct)
		var_Annotations_st.Fields = make(map[string]*structpb.Value)
		for key, value := range var_Annotations {

			var_1x := value
			var var_1x_mapped *structpb.Value

			var var_1x_err error
			var_1x_mapped, var_1x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_1x)
			if var_1x_err != nil {
				panic(var_1x_err)
			}

			var_Annotations_st.Fields[key] = var_1x_mapped
		}
		var_Annotations_mapped = structpb.NewStructValue(var_Annotations_st)
		properties["annotations"] = var_Annotations_mapped
	}

	var_CreatedBy := functionTrigger.CreatedBy

	if var_CreatedBy != nil {
		var var_CreatedBy_mapped *structpb.Value

		var var_CreatedBy_err error
		var_CreatedBy_mapped, var_CreatedBy_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_CreatedBy)
		if var_CreatedBy_err != nil {
			panic(var_CreatedBy_err)
		}
		properties["createdBy"] = var_CreatedBy_mapped
	}

	var_UpdatedBy := functionTrigger.UpdatedBy

	if var_UpdatedBy != nil {
		var var_UpdatedBy_mapped *structpb.Value

		var var_UpdatedBy_err error
		var_UpdatedBy_mapped, var_UpdatedBy_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_UpdatedBy)
		if var_UpdatedBy_err != nil {
			panic(var_UpdatedBy_err)
		}
		properties["updatedBy"] = var_UpdatedBy_mapped
	}

	var_CreatedOn := functionTrigger.CreatedOn

	if var_CreatedOn != nil {
		var var_CreatedOn_mapped *structpb.Value

		var var_CreatedOn_err error
		var_CreatedOn_mapped, var_CreatedOn_err = types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(*var_CreatedOn)
		if var_CreatedOn_err != nil {
			panic(var_CreatedOn_err)
		}
		properties["createdOn"] = var_CreatedOn_mapped
	}

	var_UpdatedOn := functionTrigger.UpdatedOn

	if var_UpdatedOn != nil {
		var var_UpdatedOn_mapped *structpb.Value

		var var_UpdatedOn_err error
		var_UpdatedOn_mapped, var_UpdatedOn_err = types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(*var_UpdatedOn)
		if var_UpdatedOn_err != nil {
			panic(var_UpdatedOn_err)
		}
		properties["updatedOn"] = var_UpdatedOn_mapped
	}

	var_Version := functionTrigger.Version

	var var_Version_mapped *structpb.Value

	var var_Version_err error
	var_Version_mapped, var_Version_err = types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(var_Version)
	if var_Version_err != nil {
		panic(var_Version_err)
	}
	properties["version"] = var_Version_mapped
	return properties
}

func (m *FunctionTriggerMapper) FromProperties(properties map[string]*structpb.Value) *FunctionTrigger {
	var s = m.New()
	if properties["id"] != nil && properties["id"].AsInterface() != nil {

		var_Id := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_Id)

		if err != nil {
			panic(err)
		}

		var_Id_mapped := new(uuid.UUID)
		*var_Id_mapped = val.(uuid.UUID)

		s.Id = var_Id_mapped
	}
	if properties["name"] != nil && properties["name"].AsInterface() != nil {

		var_Name := properties["name"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Name)

		if err != nil {
			panic(err)
		}

		var_Name_mapped := val.(string)

		s.Name = var_Name_mapped
	}
	if properties["resource"] != nil && properties["resource"].AsInterface() != nil {

		var_Resource := properties["resource"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Resource)

		if err != nil {
			panic(err)
		}

		var_Resource_mapped := val.(string)

		s.Resource = var_Resource_mapped
	}
	if properties["namespace"] != nil && properties["namespace"].AsInterface() != nil {

		var_Namespace := properties["namespace"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Namespace)

		if err != nil {
			panic(err)
		}

		var_Namespace_mapped := val.(string)

		s.Namespace = var_Namespace_mapped
	}
	if properties["action"] != nil && properties["action"].AsInterface() != nil {

		var_Action := properties["action"]
		var_Action_mapped := (FunctionTriggerAction)(var_Action.GetStringValue())

		s.Action = var_Action_mapped
	}
	if properties["order"] != nil && properties["order"].AsInterface() != nil {

		var_Order := properties["order"]
		var_Order_mapped := new(FunctionTriggerOrder)
		*var_Order_mapped = (FunctionTriggerOrder)(var_Order.GetStringValue())

		s.Order = var_Order_mapped
	}
	if properties["async"] != nil && properties["async"].AsInterface() != nil {

		var_Async := properties["async"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_BOOL).UnPack(var_Async)

		if err != nil {
			panic(err)
		}

		var_Async_mapped := val.(bool)

		s.Async = var_Async_mapped
	}
	if properties["function"] != nil && properties["function"].AsInterface() != nil {

		var_Function := properties["function"]
		var_Function_mapped := FunctionMapperInstance.FromProperties(var_Function.GetStructValue().Fields)

		s.Function = var_Function_mapped
	}
	if properties["annotations"] != nil && properties["annotations"].AsInterface() != nil {

		var_Annotations := properties["annotations"]
		var_Annotations_mapped := make(map[string]string)
		for k, v := range var_Annotations.GetStructValue().Fields {

			var_3x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_3x)

			if err != nil {
				panic(err)
			}

			var_3x_mapped := val.(string)

			var_Annotations_mapped[k] = var_3x_mapped
		}

		s.Annotations = var_Annotations_mapped
	}
	if properties["createdBy"] != nil && properties["createdBy"].AsInterface() != nil {

		var_CreatedBy := properties["createdBy"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_CreatedBy)

		if err != nil {
			panic(err)
		}

		var_CreatedBy_mapped := new(string)
		*var_CreatedBy_mapped = val.(string)

		s.CreatedBy = var_CreatedBy_mapped
	}
	if properties["updatedBy"] != nil && properties["updatedBy"].AsInterface() != nil {

		var_UpdatedBy := properties["updatedBy"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_UpdatedBy)

		if err != nil {
			panic(err)
		}

		var_UpdatedBy_mapped := new(string)
		*var_UpdatedBy_mapped = val.(string)

		s.UpdatedBy = var_UpdatedBy_mapped
	}
	if properties["createdOn"] != nil && properties["createdOn"].AsInterface() != nil {

		var_CreatedOn := properties["createdOn"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(var_CreatedOn)

		if err != nil {
			panic(err)
		}

		var_CreatedOn_mapped := new(time.Time)
		*var_CreatedOn_mapped = val.(time.Time)

		s.CreatedOn = var_CreatedOn_mapped
	}
	if properties["updatedOn"] != nil && properties["updatedOn"].AsInterface() != nil {

		var_UpdatedOn := properties["updatedOn"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(var_UpdatedOn)

		if err != nil {
			panic(err)
		}

		var_UpdatedOn_mapped := new(time.Time)
		*var_UpdatedOn_mapped = val.(time.Time)

		s.UpdatedOn = var_UpdatedOn_mapped
	}
	if properties["version"] != nil && properties["version"].AsInterface() != nil {

		var_Version := properties["version"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Version)

		if err != nil {
			panic(err)
		}

		var_Version_mapped := val.(int32)

		s.Version = var_Version_mapped
	}
	return s
}
