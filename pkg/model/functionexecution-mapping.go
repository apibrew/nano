// AUTOGENERATED FILE

//go:build !codeanalysis

package model

import (
	"github.com/apibrew/apibrew/pkg/abs"
	"github.com/apibrew/apibrew/pkg/model"
	"github.com/apibrew/apibrew/pkg/types"
	"google.golang.org/protobuf/types/known/structpb"
)

import "github.com/google/uuid"
import "github.com/apibrew/apibrew/pkg/formats/unstructured"

type FunctionExecutionMapper struct {
}

func NewFunctionExecutionMapper() *FunctionExecutionMapper {
	return &FunctionExecutionMapper{}
}

var FunctionExecutionMapperInstance = NewFunctionExecutionMapper()

func (m *FunctionExecutionMapper) New() *FunctionExecution {
	return &FunctionExecution{}
}

func (m *FunctionExecutionMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "logic",
		Name:      "FunctionExecution",
	}
}

func (m *FunctionExecutionMapper) ToRecord(functionExecution *FunctionExecution) *model.Record {
	var rec = &model.Record{}
	rec.Properties = m.ToProperties(functionExecution)

	if functionExecution.Id != nil {
		rec.Id = functionExecution.Id.String()
	}

	return rec
}

func (m *FunctionExecutionMapper) FromRecord(record *model.Record) *FunctionExecution {
	return m.FromProperties(record.Properties)
}

func (m *FunctionExecutionMapper) ToProperties(functionExecution *FunctionExecution) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Id := functionExecution.Id

	if var_Id != nil {
		var var_Id_mapped *structpb.Value

		var var_Id_err error
		var_Id_mapped, var_Id_err = types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(*var_Id)
		if var_Id_err != nil {
			panic(var_Id_err)
		}
		properties["id"] = var_Id_mapped
	}

	var_Function := functionExecution.Function

	if var_Function != nil {
		var var_Function_mapped *structpb.Value

		var_Function_mapped = structpb.NewStructValue(&structpb.Struct{Fields: FunctionMapperInstance.ToProperties(var_Function)})
		properties["function"] = var_Function_mapped
	}

	var_Input := functionExecution.Input

	if var_Input != nil {
		var var_Input_mapped *structpb.Value

		var var_Input_err error
		var_Input_mapped, var_Input_err = types.ByResourcePropertyType(model.ResourceProperty_OBJECT).Pack(var_Input)
		if var_Input_err != nil {
			panic(var_Input_err)
		}
		properties["input"] = var_Input_mapped
	}

	var_Output := functionExecution.Output

	if var_Output != nil {
		var var_Output_mapped *structpb.Value

		var var_Output_err error
		var_Output_mapped, var_Output_err = types.ByResourcePropertyType(model.ResourceProperty_OBJECT).Pack(var_Output)
		if var_Output_err != nil {
			panic(var_Output_err)
		}
		properties["output"] = var_Output_mapped
	}

	var_Error := functionExecution.Error

	if var_Error != nil {
		var var_Error_mapped *structpb.Value

		var var_Error_err error
		var_Error_mapped, var_Error_err = types.ByResourcePropertyType(model.ResourceProperty_OBJECT).Pack(var_Error)
		if var_Error_err != nil {
			panic(var_Error_err)
		}
		properties["error"] = var_Error_mapped
	}

	var_Status := functionExecution.Status

	if var_Status != nil {
		var var_Status_mapped *structpb.Value

		var var_Status_err error
		var_Status_mapped, var_Status_err = types.ByResourcePropertyType(model.ResourceProperty_ENUM).Pack(string(*var_Status))
		if var_Status_err != nil {
			panic(var_Status_err)
		}
		properties["status"] = var_Status_mapped
	}

	var_Annotations := functionExecution.Annotations

	if var_Annotations != nil {
		var var_Annotations_mapped *structpb.Value

		var var_Annotations_st *structpb.Struct = new(structpb.Struct)
		var_Annotations_st.Fields = make(map[string]*structpb.Value)
		for key, value := range var_Annotations {

			var_1x := value
			var var_1x_mapped *structpb.Value

			var var_1x_err error
			var_1x_mapped, var_1x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_1x)
			if var_1x_err != nil {
				panic(var_1x_err)
			}

			var_Annotations_st.Fields[key] = var_1x_mapped
		}
		var_Annotations_mapped = structpb.NewStructValue(var_Annotations_st)
		properties["annotations"] = var_Annotations_mapped
	}

	var_Version := functionExecution.Version

	var var_Version_mapped *structpb.Value

	var var_Version_err error
	var_Version_mapped, var_Version_err = types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(var_Version)
	if var_Version_err != nil {
		panic(var_Version_err)
	}
	properties["version"] = var_Version_mapped
	return properties
}

func (m *FunctionExecutionMapper) FromProperties(properties map[string]*structpb.Value) *FunctionExecution {
	var s = m.New()
	if properties["id"] != nil && properties["id"].AsInterface() != nil {

		var_Id := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_Id)

		if err != nil {
			panic(err)
		}

		var_Id_mapped := new(uuid.UUID)
		*var_Id_mapped = val.(uuid.UUID)

		s.Id = var_Id_mapped
	}
	if properties["function"] != nil && properties["function"].AsInterface() != nil {

		var_Function := properties["function"]
		var_Function_mapped := FunctionMapperInstance.FromProperties(var_Function.GetStructValue().Fields)

		s.Function = var_Function_mapped
	}
	if properties["input"] != nil && properties["input"].AsInterface() != nil {

		var_Input := properties["input"]
		var_Input_mapped := new(interface{})
		*var_Input_mapped = unstructured.FromValue(var_Input)

		s.Input = var_Input_mapped
	}
	if properties["output"] != nil && properties["output"].AsInterface() != nil {

		var_Output := properties["output"]
		var_Output_mapped := new(interface{})
		*var_Output_mapped = unstructured.FromValue(var_Output)

		s.Output = var_Output_mapped
	}
	if properties["error"] != nil && properties["error"].AsInterface() != nil {

		var_Error := properties["error"]
		var_Error_mapped := new(interface{})
		*var_Error_mapped = unstructured.FromValue(var_Error)

		s.Error = var_Error_mapped
	}
	if properties["status"] != nil && properties["status"].AsInterface() != nil {

		var_Status := properties["status"]
		var_Status_mapped := new(FunctionExecutionStatus)
		*var_Status_mapped = (FunctionExecutionStatus)(var_Status.GetStringValue())

		s.Status = var_Status_mapped
	}
	if properties["annotations"] != nil && properties["annotations"].AsInterface() != nil {

		var_Annotations := properties["annotations"]
		var_Annotations_mapped := make(map[string]string)
		for k, v := range var_Annotations.GetStructValue().Fields {

			var_3x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_3x)

			if err != nil {
				panic(err)
			}

			var_3x_mapped := val.(string)

			var_Annotations_mapped[k] = var_3x_mapped
		}

		s.Annotations = var_Annotations_mapped
	}
	if properties["version"] != nil && properties["version"].AsInterface() != nil {

		var_Version := properties["version"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Version)

		if err != nil {
			panic(err)
		}

		var_Version_mapped := val.(int32)

		s.Version = var_Version_mapped
	}
	return s
}
