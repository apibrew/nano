// AUTOGENERATED FILE

//go:build !codeanalysis

package model

import "github.com/google/uuid"
import "time"

type ResourceRule struct {
	Id                *uuid.UUID        `json:"id,omitempty"`
	Name              string            `json:"name,omitempty"`
	Resource          string            `json:"resource,omitempty"`
	Namespace         string            `json:"namespace,omitempty"`
	ConditionFunction *Function         `json:"conditionFunction,omitempty"`
	Annotations       map[string]string `json:"annotations,omitempty"`
	CreatedBy         *string           `json:"createdBy,omitempty"`
	UpdatedBy         *string           `json:"updatedBy,omitempty"`
	CreatedOn         *time.Time        `json:"createdOn,omitempty"`
	UpdatedOn         *time.Time        `json:"updatedOn,omitempty"`
	Version           int32             `json:"version,omitempty"`
}

func (s *ResourceRule) GetId() *uuid.UUID {
	return s.Id
}
func (s *ResourceRule) GetName() string {
	return s.Name
}
func (s *ResourceRule) GetResource() string {
	return s.Resource
}
func (s *ResourceRule) GetNamespace() string {
	return s.Namespace
}
func (s *ResourceRule) GetConditionFunction() *Function {
	return s.ConditionFunction
}
func (s *ResourceRule) GetAnnotations() map[string]string {
	return s.Annotations
}
func (s *ResourceRule) GetCreatedBy() *string {
	return s.CreatedBy
}
func (s *ResourceRule) GetUpdatedBy() *string {
	return s.UpdatedBy
}
func (s *ResourceRule) GetCreatedOn() *time.Time {
	return s.CreatedOn
}
func (s *ResourceRule) GetUpdatedOn() *time.Time {
	return s.UpdatedOn
}
func (s *ResourceRule) GetVersion() int32 {
	return s.Version
}
