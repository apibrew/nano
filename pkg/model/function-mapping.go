// AUTOGENERATED FILE

//go:build !codeanalysis

package model

import (
	"github.com/apibrew/apibrew/pkg/abs"
	"github.com/apibrew/apibrew/pkg/model"
	"github.com/apibrew/apibrew/pkg/types"
	"google.golang.org/protobuf/types/known/structpb"
)

import "github.com/google/uuid"
import "time"

type FunctionMapper struct {
}

func NewFunctionMapper() *FunctionMapper {
	return &FunctionMapper{}
}

var FunctionMapperInstance = NewFunctionMapper()

func (m *FunctionMapper) New() *Function {
	return &Function{}
}

func (m *FunctionMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "logic",
		Name:      "Function",
	}
}

func (m *FunctionMapper) ToRecord(function *Function) *model.Record {
	var rec = &model.Record{}
	rec.Properties = m.ToProperties(function)

	if function.Id != nil {
		rec.Id = function.Id.String()
	}

	return rec
}

func (m *FunctionMapper) FromRecord(record *model.Record) *Function {
	return m.FromProperties(record.Properties)
}

func (m *FunctionMapper) ToProperties(function *Function) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Id := function.Id

	if var_Id != nil {
		var var_Id_mapped *structpb.Value

		var var_Id_err error
		var_Id_mapped, var_Id_err = types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(*var_Id)
		if var_Id_err != nil {
			panic(var_Id_err)
		}
		properties["id"] = var_Id_mapped
	}

	var_Package := function.Package

	var var_Package_mapped *structpb.Value

	var var_Package_err error
	var_Package_mapped, var_Package_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Package)
	if var_Package_err != nil {
		panic(var_Package_err)
	}
	properties["package"] = var_Package_mapped

	var_Name := function.Name

	var var_Name_mapped *structpb.Value

	var var_Name_err error
	var_Name_mapped, var_Name_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Name)
	if var_Name_err != nil {
		panic(var_Name_err)
	}
	properties["name"] = var_Name_mapped

	var_Script := function.Script

	if var_Script != nil {
		var var_Script_mapped *structpb.Value

		var var_Script_err error
		var_Script_mapped, var_Script_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_Script)
		if var_Script_err != nil {
			panic(var_Script_err)
		}
		properties["script"] = var_Script_mapped
	}

	var_Module := function.Module

	if var_Module != nil {
		var var_Module_mapped *structpb.Value

		var_Module_mapped = structpb.NewStructValue(&structpb.Struct{Fields: ModuleMapperInstance.ToProperties(var_Module)})
		properties["module"] = var_Module_mapped
	}

	var_Engine := function.Engine

	if var_Engine != nil {
		var var_Engine_mapped *structpb.Value

		var_Engine_mapped = structpb.NewStructValue(&structpb.Struct{Fields: FunctionExecutionEngineMapperInstance.ToProperties(var_Engine)})
		properties["engine"] = var_Engine_mapped
	}

	var_Options := function.Options

	if var_Options != nil {
		var var_Options_mapped *structpb.Value

		var_Options_mapped = structpb.NewStructValue(&structpb.Struct{Fields: FunctionOptionsMapperInstance.ToProperties(var_Options)})
		properties["options"] = var_Options_mapped
	}

	var_Args := function.Args

	if var_Args != nil {
		var var_Args_mapped *structpb.Value

		var var_Args_l []*structpb.Value
		for _, value := range var_Args {

			var_5x := value
			var var_5x_mapped *structpb.Value

			var_5x_mapped = structpb.NewStructValue(&structpb.Struct{Fields: FunctionArgumentMapperInstance.ToProperties(&var_5x)})

			var_Args_l = append(var_Args_l, var_5x_mapped)
		}
		var_Args_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_Args_l})
		properties["args"] = var_Args_mapped
	}

	var_Annotations := function.Annotations

	if var_Annotations != nil {
		var var_Annotations_mapped *structpb.Value

		var var_Annotations_st *structpb.Struct = new(structpb.Struct)
		var_Annotations_st.Fields = make(map[string]*structpb.Value)
		for key, value := range var_Annotations {

			var_1x := value
			var var_1x_mapped *structpb.Value

			var var_1x_err error
			var_1x_mapped, var_1x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_1x)
			if var_1x_err != nil {
				panic(var_1x_err)
			}

			var_Annotations_st.Fields[key] = var_1x_mapped
		}
		var_Annotations_mapped = structpb.NewStructValue(var_Annotations_st)
		properties["annotations"] = var_Annotations_mapped
	}

	var_CreatedBy := function.CreatedBy

	if var_CreatedBy != nil {
		var var_CreatedBy_mapped *structpb.Value

		var var_CreatedBy_err error
		var_CreatedBy_mapped, var_CreatedBy_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_CreatedBy)
		if var_CreatedBy_err != nil {
			panic(var_CreatedBy_err)
		}
		properties["createdBy"] = var_CreatedBy_mapped
	}

	var_UpdatedBy := function.UpdatedBy

	if var_UpdatedBy != nil {
		var var_UpdatedBy_mapped *structpb.Value

		var var_UpdatedBy_err error
		var_UpdatedBy_mapped, var_UpdatedBy_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_UpdatedBy)
		if var_UpdatedBy_err != nil {
			panic(var_UpdatedBy_err)
		}
		properties["updatedBy"] = var_UpdatedBy_mapped
	}

	var_CreatedOn := function.CreatedOn

	if var_CreatedOn != nil {
		var var_CreatedOn_mapped *structpb.Value

		var var_CreatedOn_err error
		var_CreatedOn_mapped, var_CreatedOn_err = types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(*var_CreatedOn)
		if var_CreatedOn_err != nil {
			panic(var_CreatedOn_err)
		}
		properties["createdOn"] = var_CreatedOn_mapped
	}

	var_UpdatedOn := function.UpdatedOn

	if var_UpdatedOn != nil {
		var var_UpdatedOn_mapped *structpb.Value

		var var_UpdatedOn_err error
		var_UpdatedOn_mapped, var_UpdatedOn_err = types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(*var_UpdatedOn)
		if var_UpdatedOn_err != nil {
			panic(var_UpdatedOn_err)
		}
		properties["updatedOn"] = var_UpdatedOn_mapped
	}

	var_Version := function.Version

	var var_Version_mapped *structpb.Value

	var var_Version_err error
	var_Version_mapped, var_Version_err = types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(var_Version)
	if var_Version_err != nil {
		panic(var_Version_err)
	}
	properties["version"] = var_Version_mapped
	return properties
}

func (m *FunctionMapper) FromProperties(properties map[string]*structpb.Value) *Function {
	var s = m.New()
	if properties["id"] != nil && properties["id"].AsInterface() != nil {

		var_Id := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_Id)

		if err != nil {
			panic(err)
		}

		var_Id_mapped := new(uuid.UUID)
		*var_Id_mapped = val.(uuid.UUID)

		s.Id = var_Id_mapped
	}
	if properties["package"] != nil && properties["package"].AsInterface() != nil {

		var_Package := properties["package"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Package)

		if err != nil {
			panic(err)
		}

		var_Package_mapped := val.(string)

		s.Package = var_Package_mapped
	}
	if properties["name"] != nil && properties["name"].AsInterface() != nil {

		var_Name := properties["name"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Name)

		if err != nil {
			panic(err)
		}

		var_Name_mapped := val.(string)

		s.Name = var_Name_mapped
	}
	if properties["script"] != nil && properties["script"].AsInterface() != nil {

		var_Script := properties["script"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Script)

		if err != nil {
			panic(err)
		}

		var_Script_mapped := new(string)
		*var_Script_mapped = val.(string)

		s.Script = var_Script_mapped
	}
	if properties["module"] != nil && properties["module"].AsInterface() != nil {

		var_Module := properties["module"]
		var_Module_mapped := ModuleMapperInstance.FromProperties(var_Module.GetStructValue().Fields)

		s.Module = var_Module_mapped
	}
	if properties["engine"] != nil && properties["engine"].AsInterface() != nil {

		var_Engine := properties["engine"]
		var_Engine_mapped := FunctionExecutionEngineMapperInstance.FromProperties(var_Engine.GetStructValue().Fields)

		s.Engine = var_Engine_mapped
	}
	if properties["options"] != nil && properties["options"].AsInterface() != nil {

		var_Options := properties["options"]
		var mappedValue = FunctionOptionsMapperInstance.FromProperties(var_Options.GetStructValue().Fields)

		var_Options_mapped := mappedValue

		s.Options = var_Options_mapped
	}
	if properties["args"] != nil && properties["args"].AsInterface() != nil {

		var_Args := properties["args"]
		var_Args_mapped := []FunctionArgument{}
		for _, v := range var_Args.GetListValue().Values {

			var_4x := v
			var mappedValue = FunctionArgumentMapperInstance.FromProperties(var_4x.GetStructValue().Fields)

			var_4x_mapped := *mappedValue

			var_Args_mapped = append(var_Args_mapped, var_4x_mapped)
		}

		s.Args = var_Args_mapped
	}
	if properties["annotations"] != nil && properties["annotations"].AsInterface() != nil {

		var_Annotations := properties["annotations"]
		var_Annotations_mapped := make(map[string]string)
		for k, v := range var_Annotations.GetStructValue().Fields {

			var_3x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_3x)

			if err != nil {
				panic(err)
			}

			var_3x_mapped := val.(string)

			var_Annotations_mapped[k] = var_3x_mapped
		}

		s.Annotations = var_Annotations_mapped
	}
	if properties["createdBy"] != nil && properties["createdBy"].AsInterface() != nil {

		var_CreatedBy := properties["createdBy"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_CreatedBy)

		if err != nil {
			panic(err)
		}

		var_CreatedBy_mapped := new(string)
		*var_CreatedBy_mapped = val.(string)

		s.CreatedBy = var_CreatedBy_mapped
	}
	if properties["updatedBy"] != nil && properties["updatedBy"].AsInterface() != nil {

		var_UpdatedBy := properties["updatedBy"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_UpdatedBy)

		if err != nil {
			panic(err)
		}

		var_UpdatedBy_mapped := new(string)
		*var_UpdatedBy_mapped = val.(string)

		s.UpdatedBy = var_UpdatedBy_mapped
	}
	if properties["createdOn"] != nil && properties["createdOn"].AsInterface() != nil {

		var_CreatedOn := properties["createdOn"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(var_CreatedOn)

		if err != nil {
			panic(err)
		}

		var_CreatedOn_mapped := new(time.Time)
		*var_CreatedOn_mapped = val.(time.Time)

		s.CreatedOn = var_CreatedOn_mapped
	}
	if properties["updatedOn"] != nil && properties["updatedOn"].AsInterface() != nil {

		var_UpdatedOn := properties["updatedOn"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(var_UpdatedOn)

		if err != nil {
			panic(err)
		}

		var_UpdatedOn_mapped := new(time.Time)
		*var_UpdatedOn_mapped = val.(time.Time)

		s.UpdatedOn = var_UpdatedOn_mapped
	}
	if properties["version"] != nil && properties["version"].AsInterface() != nil {

		var_Version := properties["version"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Version)

		if err != nil {
			panic(err)
		}

		var_Version_mapped := val.(int32)

		s.Version = var_Version_mapped
	}
	return s
}

type FunctionOptionsMapper struct {
}

func NewFunctionOptionsMapper() *FunctionOptionsMapper {
	return &FunctionOptionsMapper{}
}

var FunctionOptionsMapperInstance = NewFunctionOptionsMapper()

func (m *FunctionOptionsMapper) New() *FunctionOptions {
	return &FunctionOptions{}
}

func (m *FunctionOptionsMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "logic",
		Name:      "Function",
	}
}

func (m *FunctionOptionsMapper) ToProperties(functionOptions *FunctionOptions) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_NamedParams := functionOptions.NamedParams

	if var_NamedParams != nil {
		var var_NamedParams_mapped *structpb.Value

		var var_NamedParams_err error
		var_NamedParams_mapped, var_NamedParams_err = types.ByResourcePropertyType(model.ResourceProperty_BOOL).Pack(*var_NamedParams)
		if var_NamedParams_err != nil {
			panic(var_NamedParams_err)
		}
		properties["namedParams"] = var_NamedParams_mapped
	}
	return properties
}

func (m *FunctionOptionsMapper) FromProperties(properties map[string]*structpb.Value) *FunctionOptions {
	var s = m.New()
	if properties["namedParams"] != nil && properties["namedParams"].AsInterface() != nil {

		var_NamedParams := properties["namedParams"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_BOOL).UnPack(var_NamedParams)

		if err != nil {
			panic(err)
		}

		var_NamedParams_mapped := new(bool)
		*var_NamedParams_mapped = val.(bool)

		s.NamedParams = var_NamedParams_mapped
	}
	return s
}

type FunctionArgumentMapper struct {
}

func NewFunctionArgumentMapper() *FunctionArgumentMapper {
	return &FunctionArgumentMapper{}
}

var FunctionArgumentMapperInstance = NewFunctionArgumentMapper()

func (m *FunctionArgumentMapper) New() *FunctionArgument {
	return &FunctionArgument{}
}

func (m *FunctionArgumentMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "logic",
		Name:      "Function",
	}
}

func (m *FunctionArgumentMapper) ToProperties(functionArgument *FunctionArgument) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Name := functionArgument.Name

	var var_Name_mapped *structpb.Value

	var var_Name_err error
	var_Name_mapped, var_Name_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Name)
	if var_Name_err != nil {
		panic(var_Name_err)
	}
	properties["name"] = var_Name_mapped

	var_Label := functionArgument.Label

	if var_Label != nil {
		var var_Label_mapped *structpb.Value

		var var_Label_err error
		var_Label_mapped, var_Label_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_Label)
		if var_Label_err != nil {
			panic(var_Label_err)
		}
		properties["label"] = var_Label_mapped
	}
	return properties
}

func (m *FunctionArgumentMapper) FromProperties(properties map[string]*structpb.Value) *FunctionArgument {
	var s = m.New()
	if properties["name"] != nil && properties["name"].AsInterface() != nil {

		var_Name := properties["name"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Name)

		if err != nil {
			panic(err)
		}

		var_Name_mapped := val.(string)

		s.Name = var_Name_mapped
	}
	if properties["label"] != nil && properties["label"].AsInterface() != nil {

		var_Label := properties["label"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Label)

		if err != nil {
			panic(err)
		}

		var_Label_mapped := new(string)
		*var_Label_mapped = val.(string)

		s.Label = var_Label_mapped
	}
	return s
}
